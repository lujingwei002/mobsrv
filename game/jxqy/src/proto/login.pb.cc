// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace login {

namespace {

const ::google::protobuf::Descriptor* LOGIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOGIN_reflection_ = NULL;
const ::google::protobuf::Descriptor* ENTER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ENTER_reflection_ = NULL;
const ::google::protobuf::Descriptor* DISCONNECT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DISCONNECT_reflection_ = NULL;
const ::google::protobuf::Descriptor* PING_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PING_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  LOGIN_descriptor_ = file->message_type(0);
  static const int LOGIN_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, str_),
  };
  LOGIN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOGIN_descriptor_,
      LOGIN::default_instance_,
      LOGIN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOGIN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOGIN));
  ENTER_descriptor_ = file->message_type(1);
  static const int ENTER_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ENTER, srvid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ENTER, err_),
  };
  ENTER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ENTER_descriptor_,
      ENTER::default_instance_,
      ENTER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ENTER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ENTER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ENTER));
  DISCONNECT_descriptor_ = file->message_type(2);
  static const int DISCONNECT_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DISCONNECT, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DISCONNECT, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DISCONNECT, remain_time_),
  };
  DISCONNECT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DISCONNECT_descriptor_,
      DISCONNECT::default_instance_,
      DISCONNECT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DISCONNECT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DISCONNECT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DISCONNECT));
  PING_descriptor_ = file->message_type(3);
  static const int PING_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PING, st_),
  };
  PING_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PING_descriptor_,
      PING::default_instance_,
      PING_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PING, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PING, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PING));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOGIN_descriptor_, &LOGIN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ENTER_descriptor_, &ENTER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DISCONNECT_descriptor_, &DISCONNECT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PING_descriptor_, &PING::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete LOGIN::default_instance_;
  delete LOGIN_reflection_;
  delete ENTER::default_instance_;
  delete ENTER_reflection_;
  delete DISCONNECT::default_instance_;
  delete DISCONNECT_reflection_;
  delete PING::default_instance_;
  delete PING_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\005login\"F\n\005LOGIN\022\016\n\003uid\030\001 \001"
    "(\005:\0010\022\016\n\006params\030\002 \001(\t\022\016\n\003err\030\003 \001(\005:\0010\022\r\n"
    "\003str\030\005 \001(\t:\000\")\n\005ENTER\022\020\n\005srvid\030\001 \001(\005:\0010\022"
    "\016\n\003err\030\002 \001(\005:\0010\"F\n\nDISCONNECT\022\016\n\003err\030\001 \001"
    "(\005:\0010\022\020\n\006reason\030\002 \001(\t:\000\022\026\n\013remain_time\030\004"
    " \001(\005:\0010\"\025\n\004PING\022\r\n\002st\030\001 \001(\005:\0010", 230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  LOGIN::default_instance_ = new LOGIN();
  ENTER::default_instance_ = new ENTER();
  DISCONNECT::default_instance_ = new DISCONNECT();
  PING::default_instance_ = new PING();
  LOGIN::default_instance_->InitAsDefaultInstance();
  ENTER::default_instance_->InitAsDefaultInstance();
  DISCONNECT::default_instance_->InitAsDefaultInstance();
  PING::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LOGIN::kUidFieldNumber;
const int LOGIN::kParamsFieldNumber;
const int LOGIN::kErrFieldNumber;
const int LOGIN::kStrFieldNumber;
#endif  // !_MSC_VER

LOGIN::LOGIN()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.LOGIN)
}

void LOGIN::InitAsDefaultInstance() {
}

LOGIN::LOGIN(const LOGIN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login.LOGIN)
}

void LOGIN::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOGIN::~LOGIN() {
  // @@protoc_insertion_point(destructor:login.LOGIN)
  SharedDtor();
}

void LOGIN::SharedDtor() {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void LOGIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOGIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_descriptor_;
}

const LOGIN& LOGIN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

LOGIN* LOGIN::default_instance_ = NULL;

LOGIN* LOGIN::New() const {
  return new LOGIN;
}

void LOGIN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOGIN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, err_);
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        params_->clear();
      }
    }
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOGIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.LOGIN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // optional string params = 2;
      case 2: {
        if (tag == 18) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_err;
        break;
      }

      // optional int32 err = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_str;
        break;
      }

      // optional string str = 5 [default = ""];
      case 5: {
        if (tag == 42) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.LOGIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.LOGIN)
  return false;
#undef DO_
}

void LOGIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.LOGIN)
  // optional int32 uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->params(), output);
  }

  // optional int32 err = 3 [default = 0];
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->err(), output);
  }

  // optional string str = 5 [default = ""];
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login.LOGIN)
}

::google::protobuf::uint8* LOGIN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login.LOGIN)
  // optional int32 uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string params = 2;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->params(), target);
  }

  // optional int32 err = 3 [default = 0];
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->err(), target);
  }

  // optional string str = 5 [default = ""];
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login.LOGIN)
  return target;
}

int LOGIN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string params = 2;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

    // optional int32 err = 3 [default = 0];
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional string str = 5 [default = ""];
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOGIN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOGIN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOGIN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOGIN::MergeFrom(const LOGIN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_params()) {
      set_params(from.params());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOGIN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOGIN::CopyFrom(const LOGIN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOGIN::IsInitialized() const {

  return true;
}

void LOGIN::Swap(LOGIN* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(params_, other->params_);
    std::swap(err_, other->err_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOGIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOGIN_descriptor_;
  metadata.reflection = LOGIN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ENTER::kSrvidFieldNumber;
const int ENTER::kErrFieldNumber;
#endif  // !_MSC_VER

ENTER::ENTER()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.ENTER)
}

void ENTER::InitAsDefaultInstance() {
}

ENTER::ENTER(const ENTER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login.ENTER)
}

void ENTER::SharedCtor() {
  _cached_size_ = 0;
  srvid_ = 0;
  err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ENTER::~ENTER() {
  // @@protoc_insertion_point(destructor:login.ENTER)
  SharedDtor();
}

void ENTER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ENTER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ENTER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENTER_descriptor_;
}

const ENTER& ENTER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ENTER* ENTER::default_instance_ = NULL;

ENTER* ENTER::New() const {
  return new ENTER;
}

void ENTER::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ENTER*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(srvid_, err_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ENTER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.ENTER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 srvid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srvid_)));
          set_has_srvid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_err;
        break;
      }

      // optional int32 err = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.ENTER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.ENTER)
  return false;
#undef DO_
}

void ENTER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.ENTER)
  // optional int32 srvid = 1 [default = 0];
  if (has_srvid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srvid(), output);
  }

  // optional int32 err = 2 [default = 0];
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login.ENTER)
}

::google::protobuf::uint8* ENTER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login.ENTER)
  // optional int32 srvid = 1 [default = 0];
  if (has_srvid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->srvid(), target);
  }

  // optional int32 err = 2 [default = 0];
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login.ENTER)
  return target;
}

int ENTER::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 srvid = 1 [default = 0];
    if (has_srvid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->srvid());
    }

    // optional int32 err = 2 [default = 0];
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ENTER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ENTER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ENTER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ENTER::MergeFrom(const ENTER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srvid()) {
      set_srvid(from.srvid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ENTER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENTER::CopyFrom(const ENTER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENTER::IsInitialized() const {

  return true;
}

void ENTER::Swap(ENTER* other) {
  if (other != this) {
    std::swap(srvid_, other->srvid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ENTER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ENTER_descriptor_;
  metadata.reflection = ENTER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DISCONNECT::kErrFieldNumber;
const int DISCONNECT::kReasonFieldNumber;
const int DISCONNECT::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

DISCONNECT::DISCONNECT()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.DISCONNECT)
}

void DISCONNECT::InitAsDefaultInstance() {
}

DISCONNECT::DISCONNECT(const DISCONNECT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login.DISCONNECT)
}

void DISCONNECT::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  err_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remain_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DISCONNECT::~DISCONNECT() {
  // @@protoc_insertion_point(destructor:login.DISCONNECT)
  SharedDtor();
}

void DISCONNECT::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void DISCONNECT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DISCONNECT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DISCONNECT_descriptor_;
}

const DISCONNECT& DISCONNECT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

DISCONNECT* DISCONNECT::default_instance_ = NULL;

DISCONNECT* DISCONNECT::New() const {
  return new DISCONNECT;
}

void DISCONNECT::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DISCONNECT*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(err_, remain_time_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DISCONNECT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.DISCONNECT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2 [default = ""];
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.DISCONNECT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.DISCONNECT)
  return false;
#undef DO_
}

void DISCONNECT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.DISCONNECT)
  // optional int32 err = 1 [default = 0];
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional string reason = 2 [default = ""];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional int32 remain_time = 4 [default = 0];
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login.DISCONNECT)
}

::google::protobuf::uint8* DISCONNECT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login.DISCONNECT)
  // optional int32 err = 1 [default = 0];
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional string reason = 2 [default = ""];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional int32 remain_time = 4 [default = 0];
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login.DISCONNECT)
  return target;
}

int DISCONNECT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 err = 1 [default = 0];
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional string reason = 2 [default = ""];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional int32 remain_time = 4 [default = 0];
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DISCONNECT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DISCONNECT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DISCONNECT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DISCONNECT::MergeFrom(const DISCONNECT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DISCONNECT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DISCONNECT::CopyFrom(const DISCONNECT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DISCONNECT::IsInitialized() const {

  return true;
}

void DISCONNECT::Swap(DISCONNECT* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(reason_, other->reason_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DISCONNECT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DISCONNECT_descriptor_;
  metadata.reflection = DISCONNECT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PING::kStFieldNumber;
#endif  // !_MSC_VER

PING::PING()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.PING)
}

void PING::InitAsDefaultInstance() {
}

PING::PING(const PING& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login.PING)
}

void PING::SharedCtor() {
  _cached_size_ = 0;
  st_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PING::~PING() {
  // @@protoc_insertion_point(destructor:login.PING)
  SharedDtor();
}

void PING::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PING::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PING::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PING_descriptor_;
}

const PING& PING::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

PING* PING::default_instance_ = NULL;

PING* PING::New() const {
  return new PING;
}

void PING::Clear() {
  st_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PING::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.PING)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 st = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &st_)));
          set_has_st();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.PING)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.PING)
  return false;
#undef DO_
}

void PING::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.PING)
  // optional int32 st = 1 [default = 0];
  if (has_st()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->st(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login.PING)
}

::google::protobuf::uint8* PING::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login.PING)
  // optional int32 st = 1 [default = 0];
  if (has_st()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->st(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login.PING)
  return target;
}

int PING::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 st = 1 [default = 0];
    if (has_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->st());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PING::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PING* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PING*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PING::MergeFrom(const PING& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_st()) {
      set_st(from.st());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PING::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PING::CopyFrom(const PING& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PING::IsInitialized() const {

  return true;
}

void PING::Swap(PING* other) {
  if (other != this) {
    std::swap(st_, other->st_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PING::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PING_descriptor_;
  metadata.reflection = PING_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login

// @@protoc_insertion_point(global_scope)
