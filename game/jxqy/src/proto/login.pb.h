// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace login {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class LOGIN;
class ENTER;
class DISCONNECT;
class PING;

// ===================================================================

class LOGIN : public ::google::protobuf::Message {
 public:
  LOGIN();
  virtual ~LOGIN();

  LOGIN(const LOGIN& from);

  inline LOGIN& operator=(const LOGIN& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LOGIN& default_instance();

  void Swap(LOGIN* other);

  // implements Message ----------------------------------------------

  LOGIN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LOGIN& from);
  void MergeFrom(const LOGIN& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string params = 2;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline const ::std::string& params() const;
  inline void set_params(const ::std::string& value);
  inline void set_params(const char* value);
  inline void set_params(const char* value, size_t size);
  inline ::std::string* mutable_params();
  inline ::std::string* release_params();
  inline void set_allocated_params(::std::string* params);

  // optional int32 err = 3 [default = 0];
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 3;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional string str = 5 [default = ""];
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 5;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:login.LOGIN)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* params_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 err_;
  ::std::string* str_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LOGIN* default_instance_;
};
// -------------------------------------------------------------------

class ENTER : public ::google::protobuf::Message {
 public:
  ENTER();
  virtual ~ENTER();

  ENTER(const ENTER& from);

  inline ENTER& operator=(const ENTER& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ENTER& default_instance();

  void Swap(ENTER* other);

  // implements Message ----------------------------------------------

  ENTER* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ENTER& from);
  void MergeFrom(const ENTER& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 srvid = 1 [default = 0];
  inline bool has_srvid() const;
  inline void clear_srvid();
  static const int kSrvidFieldNumber = 1;
  inline ::google::protobuf::int32 srvid() const;
  inline void set_srvid(::google::protobuf::int32 value);

  // optional int32 err = 2 [default = 0];
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:login.ENTER)
 private:
  inline void set_has_srvid();
  inline void clear_has_srvid();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 srvid_;
  ::google::protobuf::int32 err_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ENTER* default_instance_;
};
// -------------------------------------------------------------------

class DISCONNECT : public ::google::protobuf::Message {
 public:
  DISCONNECT();
  virtual ~DISCONNECT();

  DISCONNECT(const DISCONNECT& from);

  inline DISCONNECT& operator=(const DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DISCONNECT& default_instance();

  void Swap(DISCONNECT* other);

  // implements Message ----------------------------------------------

  DISCONNECT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DISCONNECT& from);
  void MergeFrom(const DISCONNECT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 err = 1 [default = 0];
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 1;
  inline ::google::protobuf::int32 err() const;
  inline void set_err(::google::protobuf::int32 value);

  // optional string reason = 2 [default = ""];
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // optional int32 remain_time = 4 [default = 0];
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 4;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:login.DISCONNECT)
 private:
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_reason();
  inline void clear_has_reason();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reason_;
  ::google::protobuf::int32 err_;
  ::google::protobuf::int32 remain_time_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static DISCONNECT* default_instance_;
};
// -------------------------------------------------------------------

class PING : public ::google::protobuf::Message {
 public:
  PING();
  virtual ~PING();

  PING(const PING& from);

  inline PING& operator=(const PING& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PING& default_instance();

  void Swap(PING* other);

  // implements Message ----------------------------------------------

  PING* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PING& from);
  void MergeFrom(const PING& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 st = 1 [default = 0];
  inline bool has_st() const;
  inline void clear_st();
  static const int kStFieldNumber = 1;
  inline ::google::protobuf::int32 st() const;
  inline void set_st(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:login.PING)
 private:
  inline void set_has_st();
  inline void clear_has_st();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 st_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static PING* default_instance_;
};
// ===================================================================


// ===================================================================

// LOGIN

// optional int32 uid = 1 [default = 0];
inline bool LOGIN::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LOGIN::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LOGIN::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LOGIN::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 LOGIN::uid() const {
  // @@protoc_insertion_point(field_get:login.LOGIN.uid)
  return uid_;
}
inline void LOGIN::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:login.LOGIN.uid)
}

// optional string params = 2;
inline bool LOGIN::has_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LOGIN::set_has_params() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LOGIN::clear_has_params() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LOGIN::clear_params() {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_->clear();
  }
  clear_has_params();
}
inline const ::std::string& LOGIN::params() const {
  // @@protoc_insertion_point(field_get:login.LOGIN.params)
  return *params_;
}
inline void LOGIN::set_params(const ::std::string& value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set:login.LOGIN.params)
}
inline void LOGIN::set_params(const char* value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(value);
  // @@protoc_insertion_point(field_set_char:login.LOGIN.params)
}
inline void LOGIN::set_params(const char* value, size_t size) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:login.LOGIN.params)
}
inline ::std::string* LOGIN::mutable_params() {
  set_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    params_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:login.LOGIN.params)
  return params_;
}
inline ::std::string* LOGIN::release_params() {
  clear_has_params();
  if (params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = params_;
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LOGIN::set_allocated_params(::std::string* params) {
  if (params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete params_;
  }
  if (params) {
    set_has_params();
    params_ = params;
  } else {
    clear_has_params();
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:login.LOGIN.params)
}

// optional int32 err = 3 [default = 0];
inline bool LOGIN::has_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LOGIN::set_has_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LOGIN::clear_has_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LOGIN::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 LOGIN::err() const {
  // @@protoc_insertion_point(field_get:login.LOGIN.err)
  return err_;
}
inline void LOGIN::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:login.LOGIN.err)
}

// optional string str = 5 [default = ""];
inline bool LOGIN::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LOGIN::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LOGIN::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LOGIN::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& LOGIN::str() const {
  // @@protoc_insertion_point(field_get:login.LOGIN.str)
  return *str_;
}
inline void LOGIN::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:login.LOGIN.str)
}
inline void LOGIN::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:login.LOGIN.str)
}
inline void LOGIN::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:login.LOGIN.str)
}
inline ::std::string* LOGIN::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:login.LOGIN.str)
  return str_;
}
inline ::std::string* LOGIN::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LOGIN::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:login.LOGIN.str)
}

// -------------------------------------------------------------------

// ENTER

// optional int32 srvid = 1 [default = 0];
inline bool ENTER::has_srvid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ENTER::set_has_srvid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ENTER::clear_has_srvid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ENTER::clear_srvid() {
  srvid_ = 0;
  clear_has_srvid();
}
inline ::google::protobuf::int32 ENTER::srvid() const {
  // @@protoc_insertion_point(field_get:login.ENTER.srvid)
  return srvid_;
}
inline void ENTER::set_srvid(::google::protobuf::int32 value) {
  set_has_srvid();
  srvid_ = value;
  // @@protoc_insertion_point(field_set:login.ENTER.srvid)
}

// optional int32 err = 2 [default = 0];
inline bool ENTER::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ENTER::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ENTER::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ENTER::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 ENTER::err() const {
  // @@protoc_insertion_point(field_get:login.ENTER.err)
  return err_;
}
inline void ENTER::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:login.ENTER.err)
}

// -------------------------------------------------------------------

// DISCONNECT

// optional int32 err = 1 [default = 0];
inline bool DISCONNECT::has_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DISCONNECT::set_has_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DISCONNECT::clear_has_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DISCONNECT::clear_err() {
  err_ = 0;
  clear_has_err();
}
inline ::google::protobuf::int32 DISCONNECT::err() const {
  // @@protoc_insertion_point(field_get:login.DISCONNECT.err)
  return err_;
}
inline void DISCONNECT::set_err(::google::protobuf::int32 value) {
  set_has_err();
  err_ = value;
  // @@protoc_insertion_point(field_set:login.DISCONNECT.err)
}

// optional string reason = 2 [default = ""];
inline bool DISCONNECT::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DISCONNECT::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DISCONNECT::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DISCONNECT::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& DISCONNECT::reason() const {
  // @@protoc_insertion_point(field_get:login.DISCONNECT.reason)
  return *reason_;
}
inline void DISCONNECT::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:login.DISCONNECT.reason)
}
inline void DISCONNECT::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:login.DISCONNECT.reason)
}
inline void DISCONNECT::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:login.DISCONNECT.reason)
}
inline ::std::string* DISCONNECT::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:login.DISCONNECT.reason)
  return reason_;
}
inline ::std::string* DISCONNECT::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DISCONNECT::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:login.DISCONNECT.reason)
}

// optional int32 remain_time = 4 [default = 0];
inline bool DISCONNECT::has_remain_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DISCONNECT::set_has_remain_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DISCONNECT::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DISCONNECT::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 DISCONNECT::remain_time() const {
  // @@protoc_insertion_point(field_get:login.DISCONNECT.remain_time)
  return remain_time_;
}
inline void DISCONNECT::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
  // @@protoc_insertion_point(field_set:login.DISCONNECT.remain_time)
}

// -------------------------------------------------------------------

// PING

// optional int32 st = 1 [default = 0];
inline bool PING::has_st() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PING::set_has_st() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PING::clear_has_st() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PING::clear_st() {
  st_ = 0;
  clear_has_st();
}
inline ::google::protobuf::int32 PING::st() const {
  // @@protoc_insertion_point(field_get:login.PING.st)
  return st_;
}
inline void PING::set_st(::google::protobuf::int32 value) {
  set_has_st();
  st_ = value;
  // @@protoc_insertion_point(field_set:login.PING.st)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
