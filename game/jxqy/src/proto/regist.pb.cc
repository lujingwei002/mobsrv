// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regist.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "regist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace regist {

namespace {

const ::google::protobuf::Descriptor* CREATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CREATE_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_regist_2eproto() {
  protobuf_AddDesc_regist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "regist.proto");
  GOOGLE_CHECK(file != NULL);
  CREATE_descriptor_ = file->message_type(0);
  static const int CREATE_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CREATE, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CREATE, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CREATE, platform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CREATE, err_),
  };
  CREATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CREATE_descriptor_,
      CREATE::default_instance_,
      CREATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CREATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CREATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CREATE));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_regist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CREATE_descriptor_, &CREATE::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_regist_2eproto() {
  delete CREATE::default_instance_;
  delete CREATE_reflection_;
}

void protobuf_AddDesc_regist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014regist.proto\022\006regist\"R\n\006CREATE\022\r\n\005unam"
    "e\030\001 \002(\t\022\024\n\trole_type\030\003 \001(\005:\0011\022\023\n\013platfor"
    "m_id\030\005 \001(\t\022\016\n\003err\030\004 \001(\005:\0011", 106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "regist.proto", &protobuf_RegisterTypes);
  CREATE::default_instance_ = new CREATE();
  CREATE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_regist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_regist_2eproto {
  StaticDescriptorInitializer_regist_2eproto() {
    protobuf_AddDesc_regist_2eproto();
  }
} static_descriptor_initializer_regist_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CREATE::kUnameFieldNumber;
const int CREATE::kRoleTypeFieldNumber;
const int CREATE::kPlatformIdFieldNumber;
const int CREATE::kErrFieldNumber;
#endif  // !_MSC_VER

CREATE::CREATE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:regist.CREATE)
}

void CREATE::InitAsDefaultInstance() {
}

CREATE::CREATE(const CREATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:regist.CREATE)
}

void CREATE::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_type_ = 1;
  platform_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CREATE::~CREATE() {
  // @@protoc_insertion_point(destructor:regist.CREATE)
  SharedDtor();
}

void CREATE::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (platform_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_id_;
  }
  if (this != default_instance_) {
  }
}

void CREATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CREATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CREATE_descriptor_;
}

const CREATE& CREATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_2eproto();
  return *default_instance_;
}

CREATE* CREATE::default_instance_ = NULL;

CREATE* CREATE::New() const {
  return new CREATE;
}

void CREATE::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    role_type_ = 1;
    if (has_platform_id()) {
      if (platform_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_id_->clear();
      }
    }
    err_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CREATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:regist.CREATE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_role_type;
        break;
      }

      // optional int32 role_type = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_err;
        break;
      }

      // optional int32 err = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_platform_id;
        break;
      }

      // optional string platform_id = 5;
      case 5: {
        if (tag == 42) {
         parse_platform_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform_id().data(), this->platform_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:regist.CREATE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:regist.CREATE)
  return false;
#undef DO_
}

void CREATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:regist.CREATE)
  // required string uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional int32 role_type = 3 [default = 1];
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_type(), output);
  }

  // optional int32 err = 4 [default = 1];
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->err(), output);
  }

  // optional string platform_id = 5;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->platform_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:regist.CREATE)
}

::google::protobuf::uint8* CREATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:regist.CREATE)
  // required string uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional int32 role_type = 3 [default = 1];
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_type(), target);
  }

  // optional int32 err = 4 [default = 1];
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->err(), target);
  }

  // optional string platform_id = 5;
  if (has_platform_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_id().data(), this->platform_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regist.CREATE)
  return target;
}

int CREATE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional int32 role_type = 3 [default = 1];
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_type());
    }

    // optional string platform_id = 5;
    if (has_platform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_id());
    }

    // optional int32 err = 4 [default = 1];
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CREATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CREATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CREATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CREATE::MergeFrom(const CREATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_platform_id()) {
      set_platform_id(from.platform_id());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CREATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CREATE::CopyFrom(const CREATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CREATE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CREATE::Swap(CREATE* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(role_type_, other->role_type_);
    std::swap(platform_id_, other->platform_id_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CREATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CREATE_descriptor_;
  metadata.reflection = CREATE_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace regist

// @@protoc_insertion_point(global_scope)
