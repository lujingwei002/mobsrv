// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "user.pb.h"
#include "task.pb.h"
#include "achieve.pb.h"
#include "friend.pb.h"
#include "item.pb.h"
// @@protoc_insertion_point(includes)

namespace dbproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_player_2eproto();
void protobuf_AssignDesc_player_2eproto();
void protobuf_ShutdownFile_player_2eproto();

class PlayerData;

// ===================================================================

class PlayerData : public ::google::protobuf::Message {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  void Swap(PlayerData* other);

  // implements Message ----------------------------------------------

  PlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional .dbproto.UserData userdata = 2;
  inline bool has_userdata() const;
  inline void clear_userdata();
  static const int kUserdataFieldNumber = 2;
  inline const ::dbproto::UserData& userdata() const;
  inline ::dbproto::UserData* mutable_userdata();
  inline ::dbproto::UserData* release_userdata();
  inline void set_allocated_userdata(::dbproto::UserData* userdata);

  // optional .dbproto.TaskData taskdata = 3;
  inline bool has_taskdata() const;
  inline void clear_taskdata();
  static const int kTaskdataFieldNumber = 3;
  inline const ::dbproto::TaskData& taskdata() const;
  inline ::dbproto::TaskData* mutable_taskdata();
  inline ::dbproto::TaskData* release_taskdata();
  inline void set_allocated_taskdata(::dbproto::TaskData* taskdata);

  // optional .dbproto.AchieveData achievedata = 4;
  inline bool has_achievedata() const;
  inline void clear_achievedata();
  static const int kAchievedataFieldNumber = 4;
  inline const ::dbproto::AchieveData& achievedata() const;
  inline ::dbproto::AchieveData* mutable_achievedata();
  inline ::dbproto::AchieveData* release_achievedata();
  inline void set_allocated_achievedata(::dbproto::AchieveData* achievedata);

  // optional .dbproto.FriendData frienddata = 5;
  inline bool has_frienddata() const;
  inline void clear_frienddata();
  static const int kFrienddataFieldNumber = 5;
  inline const ::dbproto::FriendData& frienddata() const;
  inline ::dbproto::FriendData* mutable_frienddata();
  inline ::dbproto::FriendData* release_frienddata();
  inline void set_allocated_frienddata(::dbproto::FriendData* frienddata);

  // optional .dbproto.ItemData itemdata = 6;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 6;
  inline const ::dbproto::ItemData& itemdata() const;
  inline ::dbproto::ItemData* mutable_itemdata();
  inline ::dbproto::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::dbproto::ItemData* itemdata);

  // @@protoc_insertion_point(class_scope:dbproto.PlayerData)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_userdata();
  inline void clear_has_userdata();
  inline void set_has_taskdata();
  inline void clear_has_taskdata();
  inline void set_has_achievedata();
  inline void clear_has_achievedata();
  inline void set_has_frienddata();
  inline void clear_has_frienddata();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::dbproto::UserData* userdata_;
  ::dbproto::TaskData* taskdata_;
  ::dbproto::AchieveData* achievedata_;
  ::dbproto::FriendData* frienddata_;
  ::dbproto::ItemData* itemdata_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_player_2eproto();
  friend void protobuf_AssignDesc_player_2eproto();
  friend void protobuf_ShutdownFile_player_2eproto();

  void InitAsDefaultInstance();
  static PlayerData* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerData

// optional int32 uid = 1 [default = 0];
inline bool PlayerData::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerData::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PlayerData::uid() const {
  // @@protoc_insertion_point(field_get:dbproto.PlayerData.uid)
  return uid_;
}
inline void PlayerData::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:dbproto.PlayerData.uid)
}

// optional .dbproto.UserData userdata = 2;
inline bool PlayerData::has_userdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerData::set_has_userdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerData::clear_has_userdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerData::clear_userdata() {
  if (userdata_ != NULL) userdata_->::dbproto::UserData::Clear();
  clear_has_userdata();
}
inline const ::dbproto::UserData& PlayerData::userdata() const {
  // @@protoc_insertion_point(field_get:dbproto.PlayerData.userdata)
  return userdata_ != NULL ? *userdata_ : *default_instance_->userdata_;
}
inline ::dbproto::UserData* PlayerData::mutable_userdata() {
  set_has_userdata();
  if (userdata_ == NULL) userdata_ = new ::dbproto::UserData;
  // @@protoc_insertion_point(field_mutable:dbproto.PlayerData.userdata)
  return userdata_;
}
inline ::dbproto::UserData* PlayerData::release_userdata() {
  clear_has_userdata();
  ::dbproto::UserData* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_userdata(::dbproto::UserData* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    set_has_userdata();
  } else {
    clear_has_userdata();
  }
  // @@protoc_insertion_point(field_set_allocated:dbproto.PlayerData.userdata)
}

// optional .dbproto.TaskData taskdata = 3;
inline bool PlayerData::has_taskdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerData::set_has_taskdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerData::clear_has_taskdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerData::clear_taskdata() {
  if (taskdata_ != NULL) taskdata_->::dbproto::TaskData::Clear();
  clear_has_taskdata();
}
inline const ::dbproto::TaskData& PlayerData::taskdata() const {
  // @@protoc_insertion_point(field_get:dbproto.PlayerData.taskdata)
  return taskdata_ != NULL ? *taskdata_ : *default_instance_->taskdata_;
}
inline ::dbproto::TaskData* PlayerData::mutable_taskdata() {
  set_has_taskdata();
  if (taskdata_ == NULL) taskdata_ = new ::dbproto::TaskData;
  // @@protoc_insertion_point(field_mutable:dbproto.PlayerData.taskdata)
  return taskdata_;
}
inline ::dbproto::TaskData* PlayerData::release_taskdata() {
  clear_has_taskdata();
  ::dbproto::TaskData* temp = taskdata_;
  taskdata_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_taskdata(::dbproto::TaskData* taskdata) {
  delete taskdata_;
  taskdata_ = taskdata;
  if (taskdata) {
    set_has_taskdata();
  } else {
    clear_has_taskdata();
  }
  // @@protoc_insertion_point(field_set_allocated:dbproto.PlayerData.taskdata)
}

// optional .dbproto.AchieveData achievedata = 4;
inline bool PlayerData::has_achievedata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerData::set_has_achievedata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerData::clear_has_achievedata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerData::clear_achievedata() {
  if (achievedata_ != NULL) achievedata_->::dbproto::AchieveData::Clear();
  clear_has_achievedata();
}
inline const ::dbproto::AchieveData& PlayerData::achievedata() const {
  // @@protoc_insertion_point(field_get:dbproto.PlayerData.achievedata)
  return achievedata_ != NULL ? *achievedata_ : *default_instance_->achievedata_;
}
inline ::dbproto::AchieveData* PlayerData::mutable_achievedata() {
  set_has_achievedata();
  if (achievedata_ == NULL) achievedata_ = new ::dbproto::AchieveData;
  // @@protoc_insertion_point(field_mutable:dbproto.PlayerData.achievedata)
  return achievedata_;
}
inline ::dbproto::AchieveData* PlayerData::release_achievedata() {
  clear_has_achievedata();
  ::dbproto::AchieveData* temp = achievedata_;
  achievedata_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_achievedata(::dbproto::AchieveData* achievedata) {
  delete achievedata_;
  achievedata_ = achievedata;
  if (achievedata) {
    set_has_achievedata();
  } else {
    clear_has_achievedata();
  }
  // @@protoc_insertion_point(field_set_allocated:dbproto.PlayerData.achievedata)
}

// optional .dbproto.FriendData frienddata = 5;
inline bool PlayerData::has_frienddata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerData::set_has_frienddata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerData::clear_has_frienddata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerData::clear_frienddata() {
  if (frienddata_ != NULL) frienddata_->::dbproto::FriendData::Clear();
  clear_has_frienddata();
}
inline const ::dbproto::FriendData& PlayerData::frienddata() const {
  // @@protoc_insertion_point(field_get:dbproto.PlayerData.frienddata)
  return frienddata_ != NULL ? *frienddata_ : *default_instance_->frienddata_;
}
inline ::dbproto::FriendData* PlayerData::mutable_frienddata() {
  set_has_frienddata();
  if (frienddata_ == NULL) frienddata_ = new ::dbproto::FriendData;
  // @@protoc_insertion_point(field_mutable:dbproto.PlayerData.frienddata)
  return frienddata_;
}
inline ::dbproto::FriendData* PlayerData::release_frienddata() {
  clear_has_frienddata();
  ::dbproto::FriendData* temp = frienddata_;
  frienddata_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_frienddata(::dbproto::FriendData* frienddata) {
  delete frienddata_;
  frienddata_ = frienddata;
  if (frienddata) {
    set_has_frienddata();
  } else {
    clear_has_frienddata();
  }
  // @@protoc_insertion_point(field_set_allocated:dbproto.PlayerData.frienddata)
}

// optional .dbproto.ItemData itemdata = 6;
inline bool PlayerData::has_itemdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerData::set_has_itemdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerData::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerData::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::dbproto::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::dbproto::ItemData& PlayerData::itemdata() const {
  // @@protoc_insertion_point(field_get:dbproto.PlayerData.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::dbproto::ItemData* PlayerData::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::dbproto::ItemData;
  // @@protoc_insertion_point(field_mutable:dbproto.PlayerData.itemdata)
  return itemdata_;
}
inline ::dbproto::ItemData* PlayerData::release_itemdata() {
  clear_has_itemdata();
  ::dbproto::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void PlayerData::set_allocated_itemdata(::dbproto::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:dbproto.PlayerData.itemdata)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
