// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: achieve.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "achieve.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbproto {

namespace {

const ::google::protobuf::Descriptor* Achieve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achieve_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_achieve_2eproto() {
  protobuf_AddDesc_achieve_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "achieve.proto");
  GOOGLE_CHECK(file != NULL);
  Achieve_descriptor_ = file->message_type(0);
  static const int Achieve_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve, value_),
  };
  Achieve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achieve_descriptor_,
      Achieve::default_instance_,
      Achieve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achieve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achieve));
  AchieveData_descriptor_ = file->message_type(1);
  static const int AchieveData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, achieves_),
  };
  AchieveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveData_descriptor_,
      AchieveData::default_instance_,
      AchieveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_achieve_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achieve_descriptor_, &Achieve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveData_descriptor_, &AchieveData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_achieve_2eproto() {
  delete Achieve::default_instance_;
  delete Achieve_reflection_;
  delete AchieveData::default_instance_;
  delete AchieveData_reflection_;
}

void protobuf_AddDesc_achieve_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rachieve.proto\022\007dbproto\"\'\n\007Achieve\022\r\n\002i"
    "d\030\001 \001(\005:\0010\022\r\n\005value\030\002 \003(\005\"A\n\013AchieveData"
    "\022\016\n\003uid\030\001 \001(\005:\0010\022\"\n\010achieves\030\002 \003(\0132\020.dbp"
    "roto.Achieve", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "achieve.proto", &protobuf_RegisterTypes);
  Achieve::default_instance_ = new Achieve();
  AchieveData::default_instance_ = new AchieveData();
  Achieve::default_instance_->InitAsDefaultInstance();
  AchieveData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_achieve_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_achieve_2eproto {
  StaticDescriptorInitializer_achieve_2eproto() {
    protobuf_AddDesc_achieve_2eproto();
  }
} static_descriptor_initializer_achieve_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Achieve::kIdFieldNumber;
const int Achieve::kValueFieldNumber;
#endif  // !_MSC_VER

Achieve::Achieve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbproto.Achieve)
}

void Achieve::InitAsDefaultInstance() {
}

Achieve::Achieve(const Achieve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dbproto.Achieve)
}

void Achieve::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achieve::~Achieve() {
  // @@protoc_insertion_point(destructor:dbproto.Achieve)
  SharedDtor();
}

void Achieve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achieve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achieve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achieve_descriptor_;
}

const Achieve& Achieve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

Achieve* Achieve::default_instance_ = NULL;

Achieve* Achieve::New() const {
  return new Achieve;
}

void Achieve::Clear() {
  id_ = 0;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achieve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbproto.Achieve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbproto.Achieve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbproto.Achieve)
  return false;
#undef DO_
}

void Achieve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbproto.Achieve)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbproto.Achieve)
}

::google::protobuf::uint8* Achieve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbproto.Achieve)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbproto.Achieve)
  return target;
}

int Achieve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achieve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achieve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achieve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achieve::MergeFrom(const Achieve& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achieve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achieve::CopyFrom(const Achieve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achieve::IsInitialized() const {

  return true;
}

void Achieve::Swap(Achieve* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achieve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achieve_descriptor_;
  metadata.reflection = Achieve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveData::kUidFieldNumber;
const int AchieveData::kAchievesFieldNumber;
#endif  // !_MSC_VER

AchieveData::AchieveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbproto.AchieveData)
}

void AchieveData::InitAsDefaultInstance() {
}

AchieveData::AchieveData(const AchieveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dbproto.AchieveData)
}

void AchieveData::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveData::~AchieveData() {
  // @@protoc_insertion_point(destructor:dbproto.AchieveData)
  SharedDtor();
}

void AchieveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveData_descriptor_;
}

const AchieveData& AchieveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_achieve_2eproto();
  return *default_instance_;
}

AchieveData* AchieveData::default_instance_ = NULL;

AchieveData* AchieveData::New() const {
  return new AchieveData;
}

void AchieveData::Clear() {
  uid_ = 0;
  achieves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbproto.AchieveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_achieves;
        break;
      }

      // repeated .dbproto.Achieve achieves = 2;
      case 2: {
        if (tag == 18) {
         parse_achieves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_achieves;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbproto.AchieveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbproto.AchieveData)
  return false;
#undef DO_
}

void AchieveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbproto.AchieveData)
  // optional int32 uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // repeated .dbproto.Achieve achieves = 2;
  for (int i = 0; i < this->achieves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achieves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbproto.AchieveData)
}

::google::protobuf::uint8* AchieveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbproto.AchieveData)
  // optional int32 uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // repeated .dbproto.Achieve achieves = 2;
  for (int i = 0; i < this->achieves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achieves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbproto.AchieveData)
  return target;
}

int AchieveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  // repeated .dbproto.Achieve achieves = 2;
  total_size += 1 * this->achieves_size();
  for (int i = 0; i < this->achieves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveData::MergeFrom(const AchieveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieves_.MergeFrom(from.achieves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveData::CopyFrom(const AchieveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveData::IsInitialized() const {

  return true;
}

void AchieveData::Swap(AchieveData* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    achieves_.Swap(&other->achieves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveData_descriptor_;
  metadata.reflection = AchieveData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproto

// @@protoc_insertion_point(global_scope)
