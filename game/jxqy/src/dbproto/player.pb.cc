// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbproto {

namespace {

const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_2eproto() {
  protobuf_AddDesc_player_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerData_descriptor_ = file->message_type(0);
  static const int PlayerData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, taskdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, achievedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, frienddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, itemdata_),
  };
  PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerData_descriptor_, &PlayerData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_2eproto() {
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
}

void protobuf_AddDesc_player_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dbproto::protobuf_AddDesc_user_2eproto();
  ::dbproto::protobuf_AddDesc_task_2eproto();
  ::dbproto::protobuf_AddDesc_achieve_2eproto();
  ::dbproto::protobuf_AddDesc_friend_2eproto();
  ::dbproto::protobuf_AddDesc_item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014player.proto\022\007dbproto\032\nuser.proto\032\ntas"
    "k.proto\032\rachieve.proto\032\014friend.proto\032\nit"
    "em.proto\"\337\001\n\nPlayerData\022\016\n\003uid\030\001 \001(\005:\0010\022"
    "#\n\010userdata\030\002 \001(\0132\021.dbproto.UserData\022#\n\010"
    "taskdata\030\003 \001(\0132\021.dbproto.TaskData\022)\n\013ach"
    "ievedata\030\004 \001(\0132\024.dbproto.AchieveData\022\'\n\n"
    "frienddata\030\005 \001(\0132\023.dbproto.FriendData\022#\n"
    "\010itemdata\030\006 \001(\0132\021.dbproto.ItemData", 314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
  PlayerData::default_instance_ = new PlayerData();
  PlayerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_2eproto {
  StaticDescriptorInitializer_player_2eproto() {
    protobuf_AddDesc_player_2eproto();
  }
} static_descriptor_initializer_player_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kUidFieldNumber;
const int PlayerData::kUserdataFieldNumber;
const int PlayerData::kTaskdataFieldNumber;
const int PlayerData::kAchievedataFieldNumber;
const int PlayerData::kFrienddataFieldNumber;
const int PlayerData::kItemdataFieldNumber;
#endif  // !_MSC_VER

PlayerData::PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dbproto.PlayerData)
}

void PlayerData::InitAsDefaultInstance() {
  userdata_ = const_cast< ::dbproto::UserData*>(&::dbproto::UserData::default_instance());
  taskdata_ = const_cast< ::dbproto::TaskData*>(&::dbproto::TaskData::default_instance());
  achievedata_ = const_cast< ::dbproto::AchieveData*>(&::dbproto::AchieveData::default_instance());
  frienddata_ = const_cast< ::dbproto::FriendData*>(&::dbproto::FriendData::default_instance());
  itemdata_ = const_cast< ::dbproto::ItemData*>(&::dbproto::ItemData::default_instance());
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dbproto.PlayerData)
}

void PlayerData::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  userdata_ = NULL;
  taskdata_ = NULL;
  achievedata_ = NULL;
  frienddata_ = NULL;
  itemdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  // @@protoc_insertion_point(destructor:dbproto.PlayerData)
  SharedDtor();
}

void PlayerData::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
    delete taskdata_;
    delete achievedata_;
    delete frienddata_;
    delete itemdata_;
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New() const {
  return new PlayerData;
}

void PlayerData::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    uid_ = 0;
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::dbproto::UserData::Clear();
    }
    if (has_taskdata()) {
      if (taskdata_ != NULL) taskdata_->::dbproto::TaskData::Clear();
    }
    if (has_achievedata()) {
      if (achievedata_ != NULL) achievedata_->::dbproto::AchieveData::Clear();
    }
    if (has_frienddata()) {
      if (frienddata_ != NULL) frienddata_->::dbproto::FriendData::Clear();
    }
    if (has_itemdata()) {
      if (itemdata_ != NULL) itemdata_->::dbproto::ItemData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dbproto.PlayerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userdata;
        break;
      }

      // optional .dbproto.UserData userdata = 2;
      case 2: {
        if (tag == 18) {
         parse_userdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_taskdata;
        break;
      }

      // optional .dbproto.TaskData taskdata = 3;
      case 3: {
        if (tag == 26) {
         parse_taskdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_achievedata;
        break;
      }

      // optional .dbproto.AchieveData achievedata = 4;
      case 4: {
        if (tag == 34) {
         parse_achievedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frienddata;
        break;
      }

      // optional .dbproto.FriendData frienddata = 5;
      case 5: {
        if (tag == 42) {
         parse_frienddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frienddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_itemdata;
        break;
      }

      // optional .dbproto.ItemData itemdata = 6;
      case 6: {
        if (tag == 50) {
         parse_itemdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dbproto.PlayerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dbproto.PlayerData)
  return false;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dbproto.PlayerData)
  // optional int32 uid = 1 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional .dbproto.UserData userdata = 2;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userdata(), output);
  }

  // optional .dbproto.TaskData taskdata = 3;
  if (has_taskdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->taskdata(), output);
  }

  // optional .dbproto.AchieveData achievedata = 4;
  if (has_achievedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->achievedata(), output);
  }

  // optional .dbproto.FriendData frienddata = 5;
  if (has_frienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frienddata(), output);
  }

  // optional .dbproto.ItemData itemdata = 6;
  if (has_itemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dbproto.PlayerData)
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dbproto.PlayerData)
  // optional int32 uid = 1 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional .dbproto.UserData userdata = 2;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userdata(), target);
  }

  // optional .dbproto.TaskData taskdata = 3;
  if (has_taskdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->taskdata(), target);
  }

  // optional .dbproto.AchieveData achievedata = 4;
  if (has_achievedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->achievedata(), target);
  }

  // optional .dbproto.FriendData frienddata = 5;
  if (has_frienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frienddata(), target);
  }

  // optional .dbproto.ItemData itemdata = 6;
  if (has_itemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dbproto.PlayerData)
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional .dbproto.UserData userdata = 2;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

    // optional .dbproto.TaskData taskdata = 3;
    if (has_taskdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskdata());
    }

    // optional .dbproto.AchieveData achievedata = 4;
    if (has_achievedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievedata());
    }

    // optional .dbproto.FriendData frienddata = 5;
    if (has_frienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frienddata());
    }

    // optional .dbproto.ItemData itemdata = 6;
    if (has_itemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_userdata()) {
      mutable_userdata()->::dbproto::UserData::MergeFrom(from.userdata());
    }
    if (from.has_taskdata()) {
      mutable_taskdata()->::dbproto::TaskData::MergeFrom(from.taskdata());
    }
    if (from.has_achievedata()) {
      mutable_achievedata()->::dbproto::AchieveData::MergeFrom(from.achievedata());
    }
    if (from.has_frienddata()) {
      mutable_frienddata()->::dbproto::FriendData::MergeFrom(from.frienddata());
    }
    if (from.has_itemdata()) {
      mutable_itemdata()->::dbproto::ItemData::MergeFrom(from.itemdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(userdata_, other->userdata_);
    std::swap(taskdata_, other->taskdata_);
    std::swap(achievedata_, other->achievedata_);
    std::swap(frienddata_, other->frienddata_);
    std::swap(itemdata_, other->itemdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproto

// @@protoc_insertion_point(global_scope)
