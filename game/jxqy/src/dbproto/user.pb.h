// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_user_2eproto__INCLUDED
#define PROTOBUF_user_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dbproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_2eproto();
void protobuf_AssignDesc_user_2eproto();
void protobuf_ShutdownFile_user_2eproto();

class UserData;
class UserData_Hello;

enum Hellofff {
  a = 1,
  b = 2
};
bool Hellofff_IsValid(int value);
const Hellofff Hellofff_MIN = a;
const Hellofff Hellofff_MAX = b;
const int Hellofff_ARRAYSIZE = Hellofff_MAX + 1;

const ::google::protobuf::EnumDescriptor* Hellofff_descriptor();
inline const ::std::string& Hellofff_Name(Hellofff value) {
  return ::google::protobuf::internal::NameOfEnum(
    Hellofff_descriptor(), value);
}
inline bool Hellofff_Parse(
    const ::std::string& name, Hellofff* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hellofff>(
    Hellofff_descriptor(), name, value);
}
// ===================================================================

class UserData_Hello : public ::google::protobuf::Message {
 public:
  UserData_Hello();
  virtual ~UserData_Hello();

  UserData_Hello(const UserData_Hello& from);

  inline UserData_Hello& operator=(const UserData_Hello& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_Hello& default_instance();

  void Swap(UserData_Hello* other);

  // implements Message ----------------------------------------------

  UserData_Hello* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserData_Hello& from);
  void MergeFrom(const UserData_Hello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:dbproto.UserData.Hello)
 private:
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* str_;
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static UserData_Hello* default_instance_;
};
// -------------------------------------------------------------------

class UserData : public ::google::protobuf::Message {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData& default_instance();

  void Swap(UserData* other);

  // implements Message ----------------------------------------------

  UserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UserData_Hello Hello;

  // accessors -------------------------------------------------------

  // optional int32 uid = 1 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string uname = 2 [default = ""];
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional int32 coin = 3 [default = 0];
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 3;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // optional int32 lastlogintime = 4;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastlogintimeFieldNumber = 4;
  inline ::google::protobuf::int32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dbproto.UserData)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 lastlogintime_;
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static UserData* default_instance_;
};
// ===================================================================


// ===================================================================

// UserData_Hello

// optional string str = 1;
inline bool UserData_Hello::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_Hello::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_Hello::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_Hello::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& UserData_Hello::str() const {
  // @@protoc_insertion_point(field_get:dbproto.UserData.Hello.str)
  return *str_;
}
inline void UserData_Hello::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:dbproto.UserData.Hello.str)
}
inline void UserData_Hello::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:dbproto.UserData.Hello.str)
}
inline void UserData_Hello::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dbproto.UserData.Hello.str)
}
inline ::std::string* UserData_Hello::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dbproto.UserData.Hello.str)
  return str_;
}
inline ::std::string* UserData_Hello::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserData_Hello::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dbproto.UserData.Hello.str)
}

// -------------------------------------------------------------------

// UserData

// optional int32 uid = 1 [default = 0];
inline bool UserData::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 UserData::uid() const {
  // @@protoc_insertion_point(field_get:dbproto.UserData.uid)
  return uid_;
}
inline void UserData::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:dbproto.UserData.uid)
}

// optional string uname = 2 [default = ""];
inline bool UserData::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& UserData::uname() const {
  // @@protoc_insertion_point(field_get:dbproto.UserData.uname)
  return *uname_;
}
inline void UserData::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:dbproto.UserData.uname)
}
inline void UserData::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:dbproto.UserData.uname)
}
inline void UserData::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dbproto.UserData.uname)
}
inline ::std::string* UserData::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dbproto.UserData.uname)
  return uname_;
}
inline ::std::string* UserData::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserData::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dbproto.UserData.uname)
}

// optional int32 coin = 3 [default = 0];
inline bool UserData::has_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData::set_has_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData::clear_has_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 UserData::coin() const {
  // @@protoc_insertion_point(field_get:dbproto.UserData.coin)
  return coin_;
}
inline void UserData::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:dbproto.UserData.coin)
}

// optional int32 lastlogintime = 4;
inline bool UserData::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData::clear_lastlogintime() {
  lastlogintime_ = 0;
  clear_has_lastlogintime();
}
inline ::google::protobuf::int32 UserData::lastlogintime() const {
  // @@protoc_insertion_point(field_get:dbproto.UserData.lastlogintime)
  return lastlogintime_;
}
inline void UserData::set_lastlogintime(::google::protobuf::int32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
  // @@protoc_insertion_point(field_set:dbproto.UserData.lastlogintime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbproto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dbproto::Hellofff> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dbproto::Hellofff>() {
  return ::dbproto::Hellofff_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_2eproto__INCLUDED
