// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerdata.achieve.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playerdata.achieve.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace playerdata {
namespace achieve {

namespace {

const ::google::protobuf::Descriptor* AchieveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchieveDataMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchieveDataMgr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playerdata_2eachieve_2eproto() {
  protobuf_AddDesc_playerdata_2eachieve_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playerdata.achieve.proto");
  GOOGLE_CHECK(file != NULL);
  AchieveData_descriptor_ = file->message_type(0);
  static const int AchieveData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, completed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, count_),
  };
  AchieveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveData_descriptor_,
      AchieveData::default_instance_,
      AchieveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveData));
  AchieveDataMgr_descriptor_ = file->message_type(1);
  static const int AchieveDataMgr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDataMgr, achieves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDataMgr, his_achieves_),
  };
  AchieveDataMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchieveDataMgr_descriptor_,
      AchieveDataMgr::default_instance_,
      AchieveDataMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDataMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchieveDataMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchieveDataMgr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playerdata_2eachieve_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveData_descriptor_, &AchieveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchieveDataMgr_descriptor_, &AchieveDataMgr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playerdata_2eachieve_2eproto() {
  delete AchieveData::default_instance_;
  delete AchieveData_reflection_;
  delete AchieveDataMgr::default_instance_;
  delete AchieveDataMgr_reflection_;
}

void protobuf_AddDesc_playerdata_2eachieve_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030playerdata.achieve.proto\022\022playerdata.a"
    "chieve\"a\n\013AchieveData\022\r\n\002id\030\001 \001(\005:\0010\022\031\n\016"
    "completed_time\030\002 \001(\005:\0010\022\026\n\013reward_time\030\003"
    " \001(\005:\0010\022\020\n\005count\030\004 \001(\005:\0010\"z\n\016AchieveData"
    "Mgr\0221\n\010achieves\030\001 \003(\0132\037.playerdata.achie"
    "ve.AchieveData\0225\n\014his_achieves\030\002 \003(\0132\037.p"
    "layerdata.achieve.AchieveData", 269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playerdata.achieve.proto", &protobuf_RegisterTypes);
  AchieveData::default_instance_ = new AchieveData();
  AchieveDataMgr::default_instance_ = new AchieveDataMgr();
  AchieveData::default_instance_->InitAsDefaultInstance();
  AchieveDataMgr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playerdata_2eachieve_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playerdata_2eachieve_2eproto {
  StaticDescriptorInitializer_playerdata_2eachieve_2eproto() {
    protobuf_AddDesc_playerdata_2eachieve_2eproto();
  }
} static_descriptor_initializer_playerdata_2eachieve_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AchieveData::kIdFieldNumber;
const int AchieveData::kCompletedTimeFieldNumber;
const int AchieveData::kRewardTimeFieldNumber;
const int AchieveData::kCountFieldNumber;
#endif  // !_MSC_VER

AchieveData::AchieveData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:playerdata.achieve.AchieveData)
}

void AchieveData::InitAsDefaultInstance() {
}

AchieveData::AchieveData(const AchieveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:playerdata.achieve.AchieveData)
}

void AchieveData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  completed_time_ = 0;
  reward_time_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveData::~AchieveData() {
  // @@protoc_insertion_point(destructor:playerdata.achieve.AchieveData)
  SharedDtor();
}

void AchieveData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveData_descriptor_;
}

const AchieveData& AchieveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerdata_2eachieve_2eproto();
  return *default_instance_;
}

AchieveData* AchieveData::default_instance_ = NULL;

AchieveData* AchieveData::New() const {
  return new AchieveData;
}

void AchieveData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AchieveData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:playerdata.achieve.AchieveData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_completed_time;
        break;
      }

      // optional int32 completed_time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_completed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completed_time_)));
          set_has_completed_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_time;
        break;
      }

      // optional int32 reward_time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_time_)));
          set_has_reward_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:playerdata.achieve.AchieveData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:playerdata.achieve.AchieveData)
  return false;
#undef DO_
}

void AchieveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:playerdata.achieve.AchieveData)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 completed_time = 2 [default = 0];
  if (has_completed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->completed_time(), output);
  }

  // optional int32 reward_time = 3 [default = 0];
  if (has_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_time(), output);
  }

  // optional int32 count = 4 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:playerdata.achieve.AchieveData)
}

::google::protobuf::uint8* AchieveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:playerdata.achieve.AchieveData)
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 completed_time = 2 [default = 0];
  if (has_completed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->completed_time(), target);
  }

  // optional int32 reward_time = 3 [default = 0];
  if (has_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_time(), target);
  }

  // optional int32 count = 4 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playerdata.achieve.AchieveData)
  return target;
}

int AchieveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 completed_time = 2 [default = 0];
    if (has_completed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completed_time());
    }

    // optional int32 reward_time = 3 [default = 0];
    if (has_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_time());
    }

    // optional int32 count = 4 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveData::MergeFrom(const AchieveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_completed_time()) {
      set_completed_time(from.completed_time());
    }
    if (from.has_reward_time()) {
      set_reward_time(from.reward_time());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveData::CopyFrom(const AchieveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveData::IsInitialized() const {

  return true;
}

void AchieveData::Swap(AchieveData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(completed_time_, other->completed_time_);
    std::swap(reward_time_, other->reward_time_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveData_descriptor_;
  metadata.reflection = AchieveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchieveDataMgr::kAchievesFieldNumber;
const int AchieveDataMgr::kHisAchievesFieldNumber;
#endif  // !_MSC_VER

AchieveDataMgr::AchieveDataMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:playerdata.achieve.AchieveDataMgr)
}

void AchieveDataMgr::InitAsDefaultInstance() {
}

AchieveDataMgr::AchieveDataMgr(const AchieveDataMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:playerdata.achieve.AchieveDataMgr)
}

void AchieveDataMgr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchieveDataMgr::~AchieveDataMgr() {
  // @@protoc_insertion_point(destructor:playerdata.achieve.AchieveDataMgr)
  SharedDtor();
}

void AchieveDataMgr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchieveDataMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchieveDataMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchieveDataMgr_descriptor_;
}

const AchieveDataMgr& AchieveDataMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerdata_2eachieve_2eproto();
  return *default_instance_;
}

AchieveDataMgr* AchieveDataMgr::default_instance_ = NULL;

AchieveDataMgr* AchieveDataMgr::New() const {
  return new AchieveDataMgr;
}

void AchieveDataMgr::Clear() {
  achieves_.Clear();
  his_achieves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchieveDataMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:playerdata.achieve.AchieveDataMgr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .playerdata.achieve.AchieveData achieves = 1;
      case 1: {
        if (tag == 10) {
         parse_achieves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achieves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_achieves;
        if (input->ExpectTag(18)) goto parse_his_achieves;
        break;
      }

      // repeated .playerdata.achieve.AchieveData his_achieves = 2;
      case 2: {
        if (tag == 18) {
         parse_his_achieves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_his_achieves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_his_achieves;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:playerdata.achieve.AchieveDataMgr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:playerdata.achieve.AchieveDataMgr)
  return false;
#undef DO_
}

void AchieveDataMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:playerdata.achieve.AchieveDataMgr)
  // repeated .playerdata.achieve.AchieveData achieves = 1;
  for (int i = 0; i < this->achieves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achieves(i), output);
  }

  // repeated .playerdata.achieve.AchieveData his_achieves = 2;
  for (int i = 0; i < this->his_achieves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->his_achieves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:playerdata.achieve.AchieveDataMgr)
}

::google::protobuf::uint8* AchieveDataMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:playerdata.achieve.AchieveDataMgr)
  // repeated .playerdata.achieve.AchieveData achieves = 1;
  for (int i = 0; i < this->achieves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achieves(i), target);
  }

  // repeated .playerdata.achieve.AchieveData his_achieves = 2;
  for (int i = 0; i < this->his_achieves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->his_achieves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:playerdata.achieve.AchieveDataMgr)
  return target;
}

int AchieveDataMgr::ByteSize() const {
  int total_size = 0;

  // repeated .playerdata.achieve.AchieveData achieves = 1;
  total_size += 1 * this->achieves_size();
  for (int i = 0; i < this->achieves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achieves(i));
  }

  // repeated .playerdata.achieve.AchieveData his_achieves = 2;
  total_size += 1 * this->his_achieves_size();
  for (int i = 0; i < this->his_achieves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->his_achieves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchieveDataMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchieveDataMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchieveDataMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchieveDataMgr::MergeFrom(const AchieveDataMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  achieves_.MergeFrom(from.achieves_);
  his_achieves_.MergeFrom(from.his_achieves_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchieveDataMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchieveDataMgr::CopyFrom(const AchieveDataMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchieveDataMgr::IsInitialized() const {

  return true;
}

void AchieveDataMgr::Swap(AchieveDataMgr* other) {
  if (other != this) {
    achieves_.Swap(&other->achieves_);
    his_achieves_.Swap(&other->his_achieves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchieveDataMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchieveDataMgr_descriptor_;
  metadata.reflection = AchieveDataMgr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace achieve
}  // namespace playerdata

// @@protoc_insertion_point(global_scope)
