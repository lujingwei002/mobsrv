// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerdata.achieve.proto

#ifndef PROTOBUF_playerdata_2eachieve_2eproto__INCLUDED
#define PROTOBUF_playerdata_2eachieve_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace playerdata {
namespace achieve {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playerdata_2eachieve_2eproto();
void protobuf_AssignDesc_playerdata_2eachieve_2eproto();
void protobuf_ShutdownFile_playerdata_2eachieve_2eproto();

class AchieveData;
class AchieveDataMgr;

// ===================================================================

class AchieveData : public ::google::protobuf::Message {
 public:
  AchieveData();
  virtual ~AchieveData();

  AchieveData(const AchieveData& from);

  inline AchieveData& operator=(const AchieveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveData& default_instance();

  void Swap(AchieveData* other);

  // implements Message ----------------------------------------------

  AchieveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveData& from);
  void MergeFrom(const AchieveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 completed_time = 2 [default = 0];
  inline bool has_completed_time() const;
  inline void clear_completed_time();
  static const int kCompletedTimeFieldNumber = 2;
  inline ::google::protobuf::int32 completed_time() const;
  inline void set_completed_time(::google::protobuf::int32 value);

  // optional int32 reward_time = 3 [default = 0];
  inline bool has_reward_time() const;
  inline void clear_reward_time();
  static const int kRewardTimeFieldNumber = 3;
  inline ::google::protobuf::int32 reward_time() const;
  inline void set_reward_time(::google::protobuf::int32 value);

  // optional int32 count = 4 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:playerdata.achieve.AchieveData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_completed_time();
  inline void clear_has_completed_time();
  inline void set_has_reward_time();
  inline void clear_has_reward_time();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 completed_time_;
  ::google::protobuf::int32 reward_time_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_playerdata_2eachieve_2eproto();
  friend void protobuf_AssignDesc_playerdata_2eachieve_2eproto();
  friend void protobuf_ShutdownFile_playerdata_2eachieve_2eproto();

  void InitAsDefaultInstance();
  static AchieveData* default_instance_;
};
// -------------------------------------------------------------------

class AchieveDataMgr : public ::google::protobuf::Message {
 public:
  AchieveDataMgr();
  virtual ~AchieveDataMgr();

  AchieveDataMgr(const AchieveDataMgr& from);

  inline AchieveDataMgr& operator=(const AchieveDataMgr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchieveDataMgr& default_instance();

  void Swap(AchieveDataMgr* other);

  // implements Message ----------------------------------------------

  AchieveDataMgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchieveDataMgr& from);
  void MergeFrom(const AchieveDataMgr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .playerdata.achieve.AchieveData achieves = 1;
  inline int achieves_size() const;
  inline void clear_achieves();
  static const int kAchievesFieldNumber = 1;
  inline const ::playerdata::achieve::AchieveData& achieves(int index) const;
  inline ::playerdata::achieve::AchieveData* mutable_achieves(int index);
  inline ::playerdata::achieve::AchieveData* add_achieves();
  inline const ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >&
      achieves() const;
  inline ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >*
      mutable_achieves();

  // repeated .playerdata.achieve.AchieveData his_achieves = 2;
  inline int his_achieves_size() const;
  inline void clear_his_achieves();
  static const int kHisAchievesFieldNumber = 2;
  inline const ::playerdata::achieve::AchieveData& his_achieves(int index) const;
  inline ::playerdata::achieve::AchieveData* mutable_his_achieves(int index);
  inline ::playerdata::achieve::AchieveData* add_his_achieves();
  inline const ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >&
      his_achieves() const;
  inline ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >*
      mutable_his_achieves();

  // @@protoc_insertion_point(class_scope:playerdata.achieve.AchieveDataMgr)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData > achieves_;
  ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData > his_achieves_;
  friend void  protobuf_AddDesc_playerdata_2eachieve_2eproto();
  friend void protobuf_AssignDesc_playerdata_2eachieve_2eproto();
  friend void protobuf_ShutdownFile_playerdata_2eachieve_2eproto();

  void InitAsDefaultInstance();
  static AchieveDataMgr* default_instance_;
};
// ===================================================================


// ===================================================================

// AchieveData

// optional int32 id = 1 [default = 0];
inline bool AchieveData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchieveData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchieveData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchieveData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AchieveData::id() const {
  // @@protoc_insertion_point(field_get:playerdata.achieve.AchieveData.id)
  return id_;
}
inline void AchieveData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:playerdata.achieve.AchieveData.id)
}

// optional int32 completed_time = 2 [default = 0];
inline bool AchieveData::has_completed_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchieveData::set_has_completed_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchieveData::clear_has_completed_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchieveData::clear_completed_time() {
  completed_time_ = 0;
  clear_has_completed_time();
}
inline ::google::protobuf::int32 AchieveData::completed_time() const {
  // @@protoc_insertion_point(field_get:playerdata.achieve.AchieveData.completed_time)
  return completed_time_;
}
inline void AchieveData::set_completed_time(::google::protobuf::int32 value) {
  set_has_completed_time();
  completed_time_ = value;
  // @@protoc_insertion_point(field_set:playerdata.achieve.AchieveData.completed_time)
}

// optional int32 reward_time = 3 [default = 0];
inline bool AchieveData::has_reward_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchieveData::set_has_reward_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchieveData::clear_has_reward_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchieveData::clear_reward_time() {
  reward_time_ = 0;
  clear_has_reward_time();
}
inline ::google::protobuf::int32 AchieveData::reward_time() const {
  // @@protoc_insertion_point(field_get:playerdata.achieve.AchieveData.reward_time)
  return reward_time_;
}
inline void AchieveData::set_reward_time(::google::protobuf::int32 value) {
  set_has_reward_time();
  reward_time_ = value;
  // @@protoc_insertion_point(field_set:playerdata.achieve.AchieveData.reward_time)
}

// optional int32 count = 4 [default = 0];
inline bool AchieveData::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AchieveData::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AchieveData::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AchieveData::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 AchieveData::count() const {
  // @@protoc_insertion_point(field_get:playerdata.achieve.AchieveData.count)
  return count_;
}
inline void AchieveData::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:playerdata.achieve.AchieveData.count)
}

// -------------------------------------------------------------------

// AchieveDataMgr

// repeated .playerdata.achieve.AchieveData achieves = 1;
inline int AchieveDataMgr::achieves_size() const {
  return achieves_.size();
}
inline void AchieveDataMgr::clear_achieves() {
  achieves_.Clear();
}
inline const ::playerdata::achieve::AchieveData& AchieveDataMgr::achieves(int index) const {
  // @@protoc_insertion_point(field_get:playerdata.achieve.AchieveDataMgr.achieves)
  return achieves_.Get(index);
}
inline ::playerdata::achieve::AchieveData* AchieveDataMgr::mutable_achieves(int index) {
  // @@protoc_insertion_point(field_mutable:playerdata.achieve.AchieveDataMgr.achieves)
  return achieves_.Mutable(index);
}
inline ::playerdata::achieve::AchieveData* AchieveDataMgr::add_achieves() {
  // @@protoc_insertion_point(field_add:playerdata.achieve.AchieveDataMgr.achieves)
  return achieves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >&
AchieveDataMgr::achieves() const {
  // @@protoc_insertion_point(field_list:playerdata.achieve.AchieveDataMgr.achieves)
  return achieves_;
}
inline ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >*
AchieveDataMgr::mutable_achieves() {
  // @@protoc_insertion_point(field_mutable_list:playerdata.achieve.AchieveDataMgr.achieves)
  return &achieves_;
}

// repeated .playerdata.achieve.AchieveData his_achieves = 2;
inline int AchieveDataMgr::his_achieves_size() const {
  return his_achieves_.size();
}
inline void AchieveDataMgr::clear_his_achieves() {
  his_achieves_.Clear();
}
inline const ::playerdata::achieve::AchieveData& AchieveDataMgr::his_achieves(int index) const {
  // @@protoc_insertion_point(field_get:playerdata.achieve.AchieveDataMgr.his_achieves)
  return his_achieves_.Get(index);
}
inline ::playerdata::achieve::AchieveData* AchieveDataMgr::mutable_his_achieves(int index) {
  // @@protoc_insertion_point(field_mutable:playerdata.achieve.AchieveDataMgr.his_achieves)
  return his_achieves_.Mutable(index);
}
inline ::playerdata::achieve::AchieveData* AchieveDataMgr::add_his_achieves() {
  // @@protoc_insertion_point(field_add:playerdata.achieve.AchieveDataMgr.his_achieves)
  return his_achieves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >&
AchieveDataMgr::his_achieves() const {
  // @@protoc_insertion_point(field_list:playerdata.achieve.AchieveDataMgr.his_achieves)
  return his_achieves_;
}
inline ::google::protobuf::RepeatedPtrField< ::playerdata::achieve::AchieveData >*
AchieveDataMgr::mutable_his_achieves() {
  // @@protoc_insertion_point(field_mutable_list:playerdata.achieve.AchieveDataMgr.his_achieves)
  return &his_achieves_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace achieve
}  // namespace playerdata

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playerdata_2eachieve_2eproto__INCLUDED
