// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Task;
class User;
class User_Achieve;

enum LoginStatus {
  haha = 1,
  shit = 2
};
bool LoginStatus_IsValid(int value);
const LoginStatus LoginStatus_MIN = haha;
const LoginStatus LoginStatus_MAX = shit;
const int LoginStatus_ARRAYSIZE = LoginStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginStatus_descriptor();
inline const ::std::string& LoginStatus_Name(LoginStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginStatus_descriptor(), value);
}
inline bool LoginStatus_Parse(
    const ::std::string& name, LoginStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginStatus>(
    LoginStatus_descriptor(), name, value);
}
// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.Task)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class User_Achieve : public ::google::protobuf::Message {
 public:
  User_Achieve();
  virtual ~User_Achieve();

  User_Achieve(const User_Achieve& from);

  inline User_Achieve& operator=(const User_Achieve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User_Achieve& default_instance();

  void Swap(User_Achieve* other);

  // implements Message ----------------------------------------------

  User_Achieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User_Achieve& from);
  void MergeFrom(const User_Achieve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:test.User.Achieve)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static User_Achieve* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef User_Achieve Achieve;

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional .test.Task task = 3;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 3;
  inline const ::test::Task& task() const;
  inline ::test::Task* mutable_task();
  inline ::test::Task* release_task();
  inline void set_allocated_task(::test::Task* task);

  // repeated .test.Task task_array = 4;
  inline int task_array_size() const;
  inline void clear_task_array();
  static const int kTaskArrayFieldNumber = 4;
  inline const ::test::Task& task_array(int index) const;
  inline ::test::Task* mutable_task_array(int index);
  inline ::test::Task* add_task_array();
  inline const ::google::protobuf::RepeatedPtrField< ::test::Task >&
      task_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::test::Task >*
      mutable_task_array();

  // optional .test.User.Achieve achieve = 5;
  inline bool has_achieve() const;
  inline void clear_achieve();
  static const int kAchieveFieldNumber = 5;
  inline const ::test::User_Achieve& achieve() const;
  inline ::test::User_Achieve* mutable_achieve();
  inline ::test::User_Achieve* release_achieve();
  inline void set_allocated_achieve(::test::User_Achieve* achieve);

  // @@protoc_insertion_point(class_scope:test.User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_achieve();
  inline void clear_has_achieve();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::test::Task* task_;
  ::google::protobuf::RepeatedPtrField< ::test::Task > task_array_;
  ::test::User_Achieve* achieve_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// optional int32 uid = 1;
inline bool Task::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Task::uid() const {
  // @@protoc_insertion_point(field_get:test.Task.uid)
  return uid_;
}
inline void Task::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:test.Task.uid)
}

// optional int32 id = 2;
inline bool Task::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Task::id() const {
  // @@protoc_insertion_point(field_get:test.Task.id)
  return id_;
}
inline void Task::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:test.Task.id)
}

// -------------------------------------------------------------------

// User_Achieve

// optional int32 uid = 1;
inline bool User_Achieve::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User_Achieve::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User_Achieve::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User_Achieve::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 User_Achieve::uid() const {
  // @@protoc_insertion_point(field_get:test.User.Achieve.uid)
  return uid_;
}
inline void User_Achieve::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:test.User.Achieve.uid)
}

// -------------------------------------------------------------------

// User

// optional int32 uid = 1;
inline bool User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 User::uid() const {
  // @@protoc_insertion_point(field_get:test.User.uid)
  return uid_;
}
inline void User::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:test.User.uid)
}

// optional string uname = 2;
inline bool User::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& User::uname() const {
  // @@protoc_insertion_point(field_get:test.User.uname)
  return *uname_;
}
inline void User::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:test.User.uname)
}
inline void User::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.User.uname)
}
inline void User::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.User.uname)
}
inline ::std::string* User::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.User.uname)
  return uname_;
}
inline ::std::string* User::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void User::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.User.uname)
}

// optional .test.Task task = 3;
inline bool User::has_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_task() {
  if (task_ != NULL) task_->::test::Task::Clear();
  clear_has_task();
}
inline const ::test::Task& User::task() const {
  // @@protoc_insertion_point(field_get:test.User.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::test::Task* User::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::test::Task;
  // @@protoc_insertion_point(field_mutable:test.User.task)
  return task_;
}
inline ::test::Task* User::release_task() {
  clear_has_task();
  ::test::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void User::set_allocated_task(::test::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:test.User.task)
}

// repeated .test.Task task_array = 4;
inline int User::task_array_size() const {
  return task_array_.size();
}
inline void User::clear_task_array() {
  task_array_.Clear();
}
inline const ::test::Task& User::task_array(int index) const {
  // @@protoc_insertion_point(field_get:test.User.task_array)
  return task_array_.Get(index);
}
inline ::test::Task* User::mutable_task_array(int index) {
  // @@protoc_insertion_point(field_mutable:test.User.task_array)
  return task_array_.Mutable(index);
}
inline ::test::Task* User::add_task_array() {
  // @@protoc_insertion_point(field_add:test.User.task_array)
  return task_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::test::Task >&
User::task_array() const {
  // @@protoc_insertion_point(field_list:test.User.task_array)
  return task_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::test::Task >*
User::mutable_task_array() {
  // @@protoc_insertion_point(field_mutable_list:test.User.task_array)
  return &task_array_;
}

// optional .test.User.Achieve achieve = 5;
inline bool User::has_achieve() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_achieve() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_achieve() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_achieve() {
  if (achieve_ != NULL) achieve_->::test::User_Achieve::Clear();
  clear_has_achieve();
}
inline const ::test::User_Achieve& User::achieve() const {
  // @@protoc_insertion_point(field_get:test.User.achieve)
  return achieve_ != NULL ? *achieve_ : *default_instance_->achieve_;
}
inline ::test::User_Achieve* User::mutable_achieve() {
  set_has_achieve();
  if (achieve_ == NULL) achieve_ = new ::test::User_Achieve;
  // @@protoc_insertion_point(field_mutable:test.User.achieve)
  return achieve_;
}
inline ::test::User_Achieve* User::release_achieve() {
  clear_has_achieve();
  ::test::User_Achieve* temp = achieve_;
  achieve_ = NULL;
  return temp;
}
inline void User::set_allocated_achieve(::test::User_Achieve* achieve) {
  delete achieve_;
  achieve_ = achieve;
  if (achieve) {
    set_has_achieve();
  } else {
    clear_has_achieve();
  }
  // @@protoc_insertion_point(field_set_allocated:test.User.achieve)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::test::LoginStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::LoginStatus>() {
  return ::test::LoginStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
