$#include "stdafx.h"

namespace Ae{
    int lrun_once@run_once(lua_State *L);
    int lget_api_name@get_api_name(lua_State* L);
    int lmain@main(lua_State *L);
    int lwait@wait(lua_State *L);
    int lprocess_events@process_events(lua_State *L);
    int ldelete_time_event@delete_time_event(lua_State *L);
    int lcreate_time_event@create_time_event(lua_State *L);
    int lget_file_events@get_file_events(lua_State *L);
    int ldelete_file_event@delete_file_event(lua_State *L);
    int lcreate_file_event@create_file_events(lua_State *L);
    int lmain_loop@main_loop(lua_State *L);
    int lcreate@create(lua_State *L);
    int lfree@free(lua_State *L);
    int lstop@stop(lua_State *L);
    /*
#define AE_NONE@NONE 1 
#define AE_READABLE@READABLE 1
#define AE_WRITABLE@WRITABLE 1
#define AE_OK@OK 1
#define AE_ERR@ERR 1
#define AE_FILE_EVENTS@FILE_EVENTS 1
#define AE_EVENTS@ALL_EVENTS 1
#define AE_TIME_EVENTS@TIME_EVENTS 1
#define AE_DONT_WAIT@DONT_WAIT 1
#define AE_NOMORE@NOMORE 1
    */
};

namespace Port {
    int remove_write_event(int sockfd);
    int add_write_event(int sockfd);

    int llisten@listen(lua_State *L);
    int lgetpeerip@getpeerip(lua_State *L);
    int lgetpeerport@getpeerport(lua_State *L);
    int lsyncconnect@syncconnect(lua_State *L);
    int lconnect@connect(lua_State *L);
    int lfree@free(lua_State *L);
    int lon_read@on_read(lua_State *L);
    int lon_connect_err@on_connect_err(lua_State *L);
    int lon_connect_suc@on_connect_suc(lua_State *L);
    int lon_accept@on_accept(lua_State *L);
    int lon_close@on_close(lua_State *L);
    int lrename@rename(lua_State *L);
    int lgetsrvid@getsrvid(lua_State *L);
    int lsetsrvid@setsrvid(lua_State *L);
    int lgetuserdata@getuserdata(lua_State *L);
    int lsetuserdata@setuserdata(lua_State *L);
    int lsetuid@setuid(lua_State *L);
    int lclose@close(lua_State *L);
    int lshutdown@shutdown(lua_State *L);
    int lcreate@create(lua_State *L);
    int lsend@send(lua_State *L);
    int lrecv@recv(lua_State *L);

};

namespace Recvbuf {
    int create(int sockfd, int size);
    int buf2line(int sockfd);
    int wskip(int sockfd, int len);
    int rskip(int sockfd, int len);
    int find(int sockfd, char *str, int startpos); 
    int datalen(int sockfd);
    int buflen(int sockfd);
    int bufremain(int sockfd);
    int8 readint8(int sockfd);
    int16 readint16(int sockfd);
    int32 readint32(int sockfd);
    uint16 getuint16(int sockfd);
    uint32 getuint32(int sockfd);
    int8 getint8(int sockfd);
    int16 getint16(int sockfd);
    int32 getint32(int sockfd);

    int lgetwptr@getwptr(lua_State *L);
    int lgetrptr@getrptr(lua_State *L);
    int lreadbuf@readbuf(lua_State *L);
    int ltest@test(lua_State *L);
    int lfree@free(lua_State *L);
};

namespace Sendbuf {
    int datalen(int sockfd);
    int skip_read_ptr(int sockfd, int len);
    int create(int sockfd);
    int free(int sockfd);

    int lget_read_ptr@get_read_ptr(lua_State *L);
    int lflush@flush(lua_State *L);
    int lalloc@alloc(lua_State* L);
    int ltest@test(lua_State* L);
    int lstat(lua_State *L);

};

namespace Timer 
{
int laddtimer@addtimer(lua_State *L);
int lsetselftimerloop@setselftimerloop(lua_State *L);
int lstopselftimer@stopselftimer(lua_State *L);
int laddselftimer@addselftimer(lua_State *L);
};
